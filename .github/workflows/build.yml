name: Unit test and build

on:
  workflow_dispatch:
  #push:
  #  branches: [ "master" ]
  #pull_request:
  #  branches: [ "master" ]

jobs:
  unit_test:
    name: Unit Test
    runs-on: ubuntu-latest
    env:
      GO111MODULE: 'on'
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          check-latest: true
          cache: true

      - name: Test
        run: go test ./internal/...

  build:
    name: Build
    runs-on: ubuntu-latest
    # Build only when the unit tests passed
    needs:
      - unit_test
    strategy:
      matrix:
        target_platforms:
          - GOARCH=amd64 GOOS=windows
          - GOARCH=amd64 GOOS=darwin
          - GOARCH=amd64 GOOS=linux
          - GOARCH=arm GOOS=linux
          - GOARCH=arm64 GOOS=linux
          - GOARCH=mips GOMIPS=softfloat GOOS=linux
          - GOARCH=mipsle GOOS=linux
          - GOARCH=mips64 GOOS=linux
          - GOARCH=mips64le GOOS=linux
          - GOARCH=riscv64 GOOS=linux
    env:
      GO111MODULE: 'on'
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          check-latest: true
          cache: true

      - name: Set environment variables
        run: >-
          for i in ${{ matrix.target_platforms }}; do
            echo ${i} >> $GITHUB_ENV
          done    

      - name: Build
        run: >-
          if [ "${{ env.GOOS }}" == "windows" ]; then
            export EXECUTABLE_NAME=dnsupdater.exe
          else
            export EXECUTABLE_NAME=dnsupdater
          fi
          
          export ARTIFACT_TARGET_FOLDER=dnsupdater-${GOOS}-${GOARCH}
          if [ ${{ env.GOMIPS }} ]; then
            ARTIFACT_TARGET_FOLDER=${ARTIFACT_TARGET_FOLDER}-${{ env.GOMIPS }}
          fi
          
          go build -o ./bin/${ARTIFACT_TARGET_FOLDER}/${EXECUTABLE_NAME} ./cmd/dnsupdater/main.go
          cp ./configs/config.yaml.template ./bin/dnsupdater-${GOOS}-${GOARCH}/
